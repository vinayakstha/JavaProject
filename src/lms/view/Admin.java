/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lms.view;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import lms.model.Book;
/**
 *
 * @author Acer
 */
public class Admin extends javax.swing.JFrame {

    /**
     * Creates new form Admin
     */
    public Admin() {
        initComponents();
        getConnection();
        showBookInJtable();
    }
    String imgPath = null;
    
    public Connection getConnection() {
        Connection c = null;
//        Statement s;
        try {

            // sql workbench username and password
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "password");
            System.out.println("connected");
            return c;

//            s = c.createStatement();
//
//            s.executeUpdate("Create Database if not exists library");
//            s.executeUpdate("Use library");
//            s.executeUpdate(
//                    "Create table if not exists bookTable(bookID int primary key,bookName varchar(255),bookAuthor varchar(255), bookGenre varchar(255))");

        } catch (SQLException e) {
            System.out.println(e);
            return null;
        }

    }
    
    //check text fields
    public boolean checkInputs(){
        if(bookNameTextField.getText()==null||bookAuthorTextField.getText()==null||bookCategoryTextField.getText()==null){
            return false;
        }else{
            try{
//                Integer.parseInt(bookIdTextField.getText());
                return true;
            }catch(Exception ex){
                return false;
            }
        }
    }
    
    //resize image
    public ImageIcon resizeImage(String imagePath, byte[] pic){
        ImageIcon myImage = null;
        
        if(imagePath !=null){
            myImage = new ImageIcon(imagePath);
        }else{
            myImage = new ImageIcon(pic);
        }
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img2);
        return image;
    }
    
    //display the data in Jtable
    public ArrayList<Book> getBookList(){
        ArrayList<Book> bookList = new ArrayList<Book>();
        Connection c = getConnection();
        String query = "select*from bookTable";
            
        Statement st;
        ResultSet rs;
        try {
            st = c.createStatement();
            rs = st.executeQuery(query);
            Book book;
            
            while(rs.next()){
                book = new Book(rs.getInt("bookId"), rs.getString("bookName"),rs.getString("bookAuthor"),rs.getString("bookCategory"),rs.getBytes("bookImage"));
                bookList.add(book);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
        }
        return bookList;
    }
    
    public void showBookInJtable(){
        ArrayList<Book> list = getBookList();
        DefaultTableModel model = (DefaultTableModel)bookDetailsTable.getModel();
        model.setRowCount(0);
        Object[] row = new Object[4];
        for(int i = 0;i<list.size();i++){
        row[0]=list.get(i).getBookId();
        row[1]=list.get(i).getBookName();
        row[2]=list.get(i).getBookAuthor();
        row[3]=list.get(i).getBookCategory();
        
        model.addRow(row);
    }
    }
    public void showItem(int index){
        bookIdTextField.setText(Integer.toString(getBookList().get(index).getBookId()));
        bookNameTextField.setText(getBookList().get(index).getBookName());
        bookAuthorTextField.setText(getBookList().get(index).getBookAuthor());
        bookCategoryTextField.setText(getBookList().get(index).getBookCategory());
        imageLabel.setIcon(resizeImage(null, getBookList().get(index).getPicture()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        sidePanel = new javax.swing.JPanel();
        manageBooksPanel = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        bookIdTextField = new javax.swing.JTextField();
        bookIdLabel = new javax.swing.JLabel();
        bookAuthorTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        bookNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bookCategoryTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        chooseImageBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookDetailsTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1150, 665));
        setMinimumSize(new java.awt.Dimension(1150, 665));
        setPreferredSize(new java.awt.Dimension(1150, 665));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        topPanel.setBackground(new java.awt.Color(51, 51, 255));
        topPanel.setPreferredSize(new java.awt.Dimension(1150, 55));
        topPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(topPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        sidePanel.setBackground(new java.awt.Color(0, 51, 51));
        sidePanel.setForeground(new java.awt.Color(255, 255, 255));
        sidePanel.setPreferredSize(new java.awt.Dimension(200, 620));

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );

        getContentPane().add(sidePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        manageBooksPanel.setBackground(new java.awt.Color(255, 255, 255));
        manageBooksPanel.setPreferredSize(new java.awt.Dimension(950, 620));
        manageBooksPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchTextField.setFont(new java.awt.Font("JetBrains Mono NL Light", 0, 14)); // NOI18N
        searchTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchTextField.setPreferredSize(new java.awt.Dimension(230, 30));
        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        manageBooksPanel.add(searchTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        bookIdTextField.setEditable(false);
        bookIdTextField.setBackground(new java.awt.Color(255, 255, 255));
        bookIdTextField.setFont(new java.awt.Font("JetBrains Mono Light", 0, 14)); // NOI18N
        bookIdTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bookIdTextField.setPreferredSize(new java.awt.Dimension(310, 30));
        bookIdTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIdTextFieldActionPerformed(evt);
            }
        });
        manageBooksPanel.add(bookIdTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        bookIdLabel.setFont(new java.awt.Font("JetBrains Mono", 1, 14)); // NOI18N
        bookIdLabel.setText("Book ID");
        manageBooksPanel.add(bookIdLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        bookAuthorTextField.setFont(new java.awt.Font("JetBrains Mono Light", 0, 14)); // NOI18N
        bookAuthorTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bookAuthorTextField.setPreferredSize(new java.awt.Dimension(310, 30));
        bookAuthorTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAuthorTextFieldActionPerformed(evt);
            }
        });
        manageBooksPanel.add(bookAuthorTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 310, -1));

        jLabel1.setFont(new java.awt.Font("JetBrains Mono", 1, 14)); // NOI18N
        jLabel1.setText("Author");
        manageBooksPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 70, -1));

        bookNameTextField.setFont(new java.awt.Font("JetBrains Mono Light", 0, 14)); // NOI18N
        bookNameTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bookNameTextField.setPreferredSize(new java.awt.Dimension(310, 30));
        bookNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookNameTextFieldActionPerformed(evt);
            }
        });
        manageBooksPanel.add(bookNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, -1, -1));

        jLabel2.setFont(new java.awt.Font("JetBrains Mono", 1, 14)); // NOI18N
        jLabel2.setText("Name");
        manageBooksPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, -1, -1));

        bookCategoryTextField.setFont(new java.awt.Font("JetBrains Mono Light", 0, 14)); // NOI18N
        bookCategoryTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bookCategoryTextField.setPreferredSize(new java.awt.Dimension(310, 30));
        bookCategoryTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookCategoryTextFieldActionPerformed(evt);
            }
        });
        manageBooksPanel.add(bookCategoryTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 180, -1, -1));

        jLabel3.setFont(new java.awt.Font("JetBrains Mono", 1, 14)); // NOI18N
        jLabel3.setText("Category");
        manageBooksPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 160, -1, -1));

        imageLabel.setBackground(new java.awt.Color(204, 204, 204));
        imageLabel.setOpaque(true);
        manageBooksPanel.add(imageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(737, 20, 170, 160));

        chooseImageBtn.setBackground(new java.awt.Color(0, 204, 204));
        chooseImageBtn.setFont(new java.awt.Font("JetBrains Mono Light", 0, 12)); // NOI18N
        chooseImageBtn.setText("Select Image");
        chooseImageBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        chooseImageBtn.setFocusable(false);
        chooseImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseImageBtnActionPerformed(evt);
            }
        });
        manageBooksPanel.add(chooseImageBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(737, 180, 170, 30));

        bookDetailsTable.setFont(new java.awt.Font("JetBrains Mono Light", 0, 12)); // NOI18N
        bookDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Name", "Author", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookDetailsTable.setRowHeight(25);
        bookDetailsTable.setShowGrid(true);
        bookDetailsTable.getTableHeader().setResizingAllowed(false);
        bookDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookDetailsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookDetailsTable);
        if (bookDetailsTable.getColumnModel().getColumnCount() > 0) {
            bookDetailsTable.getColumnModel().getColumn(0).setResizable(false);
            bookDetailsTable.getColumnModel().getColumn(1).setResizable(false);
            bookDetailsTable.getColumnModel().getColumn(2).setResizable(false);
            bookDetailsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        manageBooksPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 650, 300));

        addButton.setBackground(new java.awt.Color(51, 255, 102));
        addButton.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        addButton.setText("Add");
        addButton.setFocusable(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        manageBooksPanel.add(addButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(737, 250, 170, 40));

        updateButton.setBackground(new java.awt.Color(0, 153, 255));
        updateButton.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        updateButton.setText("Update");
        updateButton.setFocusable(false);
        updateButton.setPreferredSize(new java.awt.Dimension(170, 40));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        manageBooksPanel.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(737, 320, -1, -1));

        deleteButton.setBackground(new java.awt.Color(255, 51, 51));
        deleteButton.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.setFocusable(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        manageBooksPanel.add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(737, 390, 170, 40));

        clearButton.setBackground(new java.awt.Color(51, 255, 102));
        clearButton.setFont(new java.awt.Font("JetBrains Mono", 0, 12)); // NOI18N
        clearButton.setText("Clear");
        clearButton.setFocusable(false);
        clearButton.setPreferredSize(new java.awt.Dimension(170, 40));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        manageBooksPanel.add(clearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(737, 460, -1, -1));

        getContentPane().add(manageBooksPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void bookIdTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookIdTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookIdTextFieldActionPerformed

    private void bookAuthorTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAuthorTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookAuthorTextFieldActionPerformed

    private void bookNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookNameTextFieldActionPerformed

    private void bookCategoryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookCategoryTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookCategoryTextFieldActionPerformed

    private void chooseImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseImageBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.image", "jpg", "png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            imageLabel.setIcon(resizeImage(path,null));
            imgPath = path;
        }else{
            System.out.println("no file selected");
        }
    }//GEN-LAST:event_chooseImageBtnActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if(checkInputs()&& imgPath!=null){ 
            try {
                Connection c = getConnection();
                PreparedStatement ps = c.prepareStatement("insert into bookTable(bookName, bookAuthor, bookCategory, bookImage)"
                        +"values(?,?,?,?)");
                ps.setString(1, bookNameTextField.getText());
                ps.setString(2, bookAuthorTextField.getText());
                ps.setString(3, bookCategoryTextField.getText());
                InputStream img = new FileInputStream(new File(imgPath));
                ps.setBlob(4, img);
                ps.executeUpdate();
                showBookInJtable();
                JOptionPane.showMessageDialog(null,"Book added successfully");
                
                
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please fill all the fields");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if(!bookIdTextField.getText().equals("")){
            try{
                Connection c = getConnection();
                PreparedStatement ps = c.prepareStatement("delete from bookTable where bookId=?");
                int id = Integer.parseInt(bookIdTextField.getText());
                ps.setInt(1, id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Book deleted successfully");
                showBookInJtable();
                bookIdTextField.setText(null);
                bookNameTextField.setText(null);
                bookAuthorTextField.setText(null);
                bookCategoryTextField.setText(null);
                bookDetailsTable.clearSelection();//clear the table selection
                imageLabel.setIcon(null);//clear the image 
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please enter book ID");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        if(checkInputs()&&bookIdTextField.getText()!=null){
            String updateQuery = null;
            PreparedStatement ps = null;
            Connection c = getConnection();
            
            //update without image
            if(imgPath ==null){
                try {
                    updateQuery = "update bookTable set bookName =?, bookAuthor = ?, bookCategory = ? "+"where bookId=?";
                    ps = c.prepareStatement(updateQuery);
                    ps.setString(1, bookNameTextField.getText());
                    ps.setString(2, bookAuthorTextField.getText());
                    ps.setString(3, bookCategoryTextField.getText());
                    ps.setInt(4, Integer.parseInt(bookIdTextField.getText()));
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Book updated successfully");
                    showBookInJtable();
                } catch (SQLException ex) {
                    Logger.getLogger(Admin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{            
                InputStream img = null;
                try {
                    //update with image
                    img = new FileInputStream(new File(imgPath));
                    updateQuery = "update bookTable set bookName =?, bookAuthor = ?, bookCategory = ?"
                            +", bookImage=? where bookId=?";
                    ps = c.prepareStatement(updateQuery);
                    ps.setString(1, bookNameTextField.getText());
                    ps.setString(2, bookAuthorTextField.getText());
                    ps.setString(3, bookCategoryTextField.getText());
                    ps.setBlob(4, img);
                    ps.setInt(5, Integer.parseInt(bookIdTextField.getText()));
                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Book updated successfully"); // Added for consistency
                    showBookInJtable();
                } catch (Exception ex) {
                   JOptionPane.showMessageDialog(null, ex.getMessage());
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please fill all the text fields");
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        bookIdTextField.setText(null);
        bookNameTextField.setText(null);
        bookAuthorTextField.setText(null);
        bookCategoryTextField.setText(null);
        bookDetailsTable.clearSelection();//clear the table selection
        imageLabel.setIcon(null);//clear the image 
    }//GEN-LAST:event_clearButtonActionPerformed

    private void bookDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookDetailsTableMouseClicked
        // TODO add your handling code here:
        int index = bookDetailsTable.getSelectedRow();
        showItem(index);
    }//GEN-LAST:event_bookDetailsTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    public javax.swing.JTextField bookAuthorTextField;
    private javax.swing.JTextField bookCategoryTextField;
    private javax.swing.JTable bookDetailsTable;
    public javax.swing.JLabel bookIdLabel;
    public javax.swing.JTextField bookIdTextField;
    public javax.swing.JTextField bookNameTextField;
    public javax.swing.JButton chooseImageBtn;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel manageBooksPanel;
    public javax.swing.JTextField searchTextField;
    public javax.swing.JPanel sidePanel;
    public javax.swing.JPanel topPanel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
